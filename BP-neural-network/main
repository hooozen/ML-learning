{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "orig_nbformat": 4,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.9.5 64-bit"
  },
  "interpreter": {
   "hash": "aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "(401, 25)"
      ]
     },
     "metadata": {},
     "execution_count": 1
    }
   ],
   "source": [
    "from scipy.io import loadmat\n",
    "data = loadmat('ex4data1.mat')\n",
    "weights = loadmat('ex4weights.mat')\n",
    "\n",
    "X = data['X']\n",
    "y = data['y']\n",
    "\n",
    "Theta1 = weights['Theta1'].T\n",
    "Theta2 = weights['Theta2'].T\n",
    "\n",
    "Theta1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "[9]\n"
     ]
    }
   ],
   "source": [
    "from PIL import Image\n",
    "\n",
    "def showImage(i):\n",
    "    imgMatrix = ((X[i] + 10.0) / 20 * 255).reshape(20, 20).transpose()\n",
    "    Image.fromarray(imgMatrix).show()\n",
    "    print(y[i])\n",
    "\n",
    "showImage(4500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(z):\n",
    "    return 1 / (1 + np.exp(-z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def nnCostFunction(nn_params, input_layer_size, hidden_layer_size, num_labels, X, y, l):\n",
    "    Theta1 = nn_params[0]\n",
    "    Theta2 = nn_params[1]\n",
    "\n",
    "    m = X.shape[0]\n",
    "\n",
    "    loss = 0\n",
    "    Theta1_grad = np.ones(Theta1.shape)\n",
    "    Theta2_grad = np.ones(Theta2.shape)\n",
    "\n",
    "    ones = np.ones(m).reshape(m, 1)\n",
    "\n",
    "    X_ = np.append(ones, X, axis=1)\n",
    "\n",
    "    Z_1 = X_ @ Theta1\n",
    "\n",
    "    A_1 = sigmoid(Z_1)\n",
    "\n",
    "    A_1_ = np.append(ones, A_1, axis = 1)\n",
    "\n",
    "    Z_2 = A_1_ @ Theta2\n",
    "\n",
    "    y_hat = sigmoid(Z_2)\n",
    "\n",
    "    for i in range(10):\n",
    "        y_ = (y == i + 1) * 1\n",
    "        t = -y_ * np.log(y_hat[:, i].reshape(5000, 1)) - (1 - y_) * np.log(1 - y_hat[:, i].reshape(5000, 1))\n",
    "        loss += np.mean(t)\n",
    "\n",
    "    regularized_term = l / (2 * m) * (np.sum(np.power(Theta1[1:, :], 2)) + np.sum(np.power(Theta2[1:, :], 2)))\n",
    "    loss += regularized_term\n",
    "\n",
    "    y_ = np.zeros([5000, 10])\n",
    "    y_[list(range(5000)), (y - 1).T] = 1\n",
    "\n",
    "    delta_2 = y_hat - y_\n",
    "    delta_1 = delta_2 @ Theta2[1:,:].T * A_1 * (1 - A_1)\n",
    "\n",
    "    Theta1_grad_sum = 0\n",
    "    Theta2_grad_sum = 0\n",
    "\n",
    "    for i in range(m):\n",
    "        delta_2_size = delta_2.shape[1]\n",
    "        delta_2_i = delta_2[i, :].reshape(delta_2_size, 1)\n",
    "        A_1_i = A_1[i, :].reshape(hidden_layer_size, 1)\n",
    "        Theta2_grad_i = A_1_i @ delta_2_i.T\n",
    "        \n",
    "        Theta2_ = Theta2[1:, :]\n",
    "        delta_1_i = Theta2_ @ delta_2_i * (1 - A_1_i) * A_1_i\n",
    "        x_i = X[i, :].reshape(input_layer_size, 1)\n",
    "        Theta1_grad_i = x_i @ delta_1_i.T\n",
    "\n",
    "        Theta1_grad_sum += Theta1_grad_i\n",
    "        Theta2_grad_sum += Theta2_grad_i\n",
    "\n",
    "\n",
    "    Theta2_grad[1:] = Theta2_grad_sum / m\n",
    "    Theta1_grad[1:] = Theta1_grad_sum / m\n",
    "\n",
    "\n",
    "    return (loss, Theta1_grad, Theta2_grad)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "(0.38376985909092365,\n",
       " array([[ 1.00000000e+00,  1.00000000e+00,  1.00000000e+00, ...,\n",
       "          1.00000000e+00,  1.00000000e+00,  1.00000000e+00],\n",
       "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
       "        ...,\n",
       "        [ 9.70102410e-09,  3.22774693e-08,  7.05404498e-08, ...,\n",
       "         -1.40472252e-08,  5.06149568e-07,  5.05491848e-09],\n",
       "        [ 2.85541159e-09, -1.26316319e-10,  1.41584916e-09, ...,\n",
       "          1.94786057e-09, -5.54722494e-08,  4.46821993e-09],\n",
       "        [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,\n",
       "          0.00000000e+00,  0.00000000e+00,  0.00000000e+00]]),\n",
       " array([[ 1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n",
       "          1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n",
       "          1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n",
       "          1.00000000e+00],\n",
       "        [ 7.50946274e-04, -3.30198116e-04,  1.12882466e-03,\n",
       "         -2.49254335e-04,  1.22282207e-03, -2.32884889e-04,\n",
       "         -6.90830814e-04,  4.45690558e-04, -6.88848156e-05,\n",
       "          8.40622498e-04],\n",
       "        [ 9.87964596e-05,  7.35246432e-04, -1.25679941e-03,\n",
       "         -3.25817442e-04, -1.28856970e-03,  5.54475155e-04,\n",
       "          9.12420358e-04,  1.95268643e-03, -5.61678035e-04,\n",
       "          7.49803373e-04],\n",
       "        [ 1.48819864e-03, -1.10891236e-03,  1.84001416e-03,\n",
       "          1.18603273e-04, -1.20256027e-03, -7.07707327e-05,\n",
       "          1.21636965e-03, -1.79675107e-04,  7.82060264e-04,\n",
       "         -4.75889811e-04],\n",
       "        [ 7.31802078e-04,  5.08782634e-04,  8.15869182e-05,\n",
       "         -1.13145832e-03, -1.67357357e-04,  2.48878481e-04,\n",
       "          9.04321371e-04,  2.22874615e-05,  2.59685237e-03,\n",
       "         -2.75108890e-04],\n",
       "        [ 1.38113760e-03, -5.19734068e-05, -9.12851837e-04,\n",
       "          1.44485566e-04,  1.26920834e-03, -3.26833559e-04,\n",
       "          1.46426424e-03,  5.26078830e-04, -1.42445183e-05,\n",
       "          1.63093186e-04],\n",
       "        [-1.59325422e-04,  1.74945559e-04, -5.68505499e-04,\n",
       "          1.13977144e-03,  1.78409344e-04, -2.31513100e-04,\n",
       "          1.42955507e-03, -8.74793116e-04,  1.76594324e-03,\n",
       "         -3.86608063e-04],\n",
       "        [-6.68870887e-04, -7.39064994e-04,  9.15138853e-04,\n",
       "         -2.76071810e-04, -1.12026605e-03,  1.60280415e-03,\n",
       "          8.26048276e-04,  1.37929356e-03, -2.83670734e-04,\n",
       "          4.07194373e-04],\n",
       "        [-1.24979363e-03,  9.64388691e-04,  4.64048849e-04,\n",
       "         -6.07058025e-04,  8.98133571e-04, -1.35952041e-03,\n",
       "          5.20560586e-04,  1.15031930e-03,  7.23534363e-04,\n",
       "          4.14276469e-04],\n",
       "        [-9.66225987e-05,  5.79125641e-04,  4.28980738e-04,\n",
       "          2.00406221e-03,  6.40020340e-05,  1.27242662e-03,\n",
       "          4.09724765e-04, -5.51497242e-04, -1.12572225e-03,\n",
       "         -6.44816897e-05],\n",
       "        [ 7.19244384e-04,  1.29281909e-03, -4.64979824e-04,\n",
       "         -9.26612074e-04, -1.76857695e-04,  1.12159102e-03,\n",
       "         -8.70501881e-04,  9.95140627e-04,  1.30840836e-04,\n",
       "          7.60309757e-04],\n",
       "        [-5.10976177e-04,  1.75949394e-03,  1.51397892e-03,\n",
       "         -2.01368526e-04, -5.39848044e-04, -6.27548230e-04,\n",
       "          9.72081317e-04, -7.29970859e-04, -5.66125198e-05,\n",
       "          1.06863698e-03],\n",
       "        [ 1.11120644e-03,  1.30221701e-03, -3.32895997e-04,\n",
       "          5.80461317e-04, -7.35934645e-04, -4.56304858e-04,\n",
       "         -3.03188312e-04, -1.23711498e-03,  9.68861638e-04,\n",
       "          1.63130504e-03],\n",
       "        [-6.43551911e-04, -9.87783575e-04, -3.07445967e-04,\n",
       "          1.58562579e-03,  1.29041348e-04, -1.24960483e-03,\n",
       "          4.77174142e-04,  1.22701926e-03,  5.24539442e-04,\n",
       "          1.30124972e-03],\n",
       "        [-6.95182470e-04, -2.39887091e-04, -1.49550657e-03,\n",
       "         -5.49024607e-04,  9.37325565e-04,  6.99968719e-04,\n",
       "         -5.26329010e-04,  1.25047264e-03,  1.33314112e-03,\n",
       "          1.02705960e-03],\n",
       "        [-9.47091610e-04, -1.07227601e-03,  1.49037022e-03,\n",
       "          3.06042963e-04,  8.67006479e-05,  3.22403744e-04,\n",
       "         -1.24303344e-03,  2.12639236e-04,  1.82862707e-03,\n",
       "          5.40580976e-04],\n",
       "        [ 2.00794722e-04,  1.52381719e-03,  9.94215429e-04,\n",
       "          4.03405275e-04,  3.73720869e-04, -5.83872103e-04,\n",
       "         -2.84119878e-04,  1.39420851e-03, -1.21907546e-04,\n",
       "         -5.61650698e-04],\n",
       "        [ 9.50724940e-04,  4.91374051e-04, -6.88537268e-04,\n",
       "          9.67974359e-04, -6.99064544e-04,  8.74417193e-04,\n",
       "         -2.25488304e-04,  1.80320414e-03,  7.75819216e-04,\n",
       "         -7.20436373e-04],\n",
       "        [-5.42000276e-04,  6.97764085e-05,  6.89197937e-04,\n",
       "         -8.86700248e-05, -8.69607078e-04,  1.38932037e-03,\n",
       "          7.79525983e-04, -4.51487804e-04, -2.19923805e-04,\n",
       "          1.13423425e-03],\n",
       "        [-5.05540551e-05,  1.21105864e-03,  1.12333480e-03,\n",
       "          1.35797213e-04, -1.95442516e-03, -1.49304420e-04,\n",
       "          3.80617213e-05,  1.64887913e-03, -2.26989188e-04,\n",
       "         -2.88384083e-04],\n",
       "        [ 2.22327563e-04,  7.54198536e-04,  1.11253596e-03,\n",
       "         -1.06682994e-03,  1.30633950e-03,  2.37414844e-04,\n",
       "         -8.66392990e-04,  7.71735888e-04,  1.31976021e-03,\n",
       "         -1.06346990e-03],\n",
       "        [ 5.06964221e-04, -6.21040577e-04,  1.94466383e-04,\n",
       "         -7.54405264e-04,  1.50354974e-03,  1.36928244e-03,\n",
       "          7.10746609e-04, -1.09614374e-03, -3.15111809e-05,\n",
       "          8.28191172e-04],\n",
       "        [ 2.45312090e-04, -1.76663535e-04, -1.31811591e-04,\n",
       "          1.62584412e-03,  1.84757589e-03, -1.30630233e-04,\n",
       "          4.60255965e-04,  7.32915870e-04, -7.74878054e-04,\n",
       "         -5.38570824e-04],\n",
       "        [ 1.39987507e-03, -1.39495592e-03,  6.99115229e-04,\n",
       "          6.50737796e-05,  1.05434391e-03,  7.29394600e-04,\n",
       "          1.44571671e-05,  2.57511498e-04,  5.00631408e-04,\n",
       "          9.66104721e-05],\n",
       "        [ 5.07147165e-04,  1.44730496e-03, -5.51270699e-04,\n",
       "          1.20361986e-03,  4.35748719e-04,  1.00403989e-03,\n",
       "         -9.70809278e-04, -3.75811463e-04,  1.13453370e-03,\n",
       "         -7.57736846e-04],\n",
       "        [ 8.73666979e-04, -9.03758987e-04,  3.21888222e-04,\n",
       "          8.79809312e-04, -1.55190119e-03,  5.00051329e-04,\n",
       "         -9.84907927e-04,  1.27957448e-03,  1.35707295e-03,\n",
       "          7.73329872e-04]]))"
      ]
     },
     "metadata": {},
     "execution_count": 34
    }
   ],
   "source": [
    "nnCostFunction((Theta1, Theta2), 400, 25, 10, X, y, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}